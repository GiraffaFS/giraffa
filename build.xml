<?xml version="1.0"?>

<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="giraffa" default="compile" basedir="." 
  xmlns:artifact="urn:maven-artifact-ant"
  xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
        The build file for the Giraffa file system.
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src/java"/>
  <property name="test" location="src/test"/>
  <property name="conf" location="conf"/>
  <property name="build" location="build"/>
  <property name="lib" location="lib"/>
  <property name="ivy" location="ivy"/>
  <property name="dist" location="dist"/>
  <property name="test.reports" location="${build}/test_reports"/>
  <property name="findbugs.reports" location="${build}/findbugs_reports"/>
  <property name="findbugs.failOnError" value="true"/>
  <!-- Ivy properties -->
  <property name="ivy.version" value="2.1.0"/>
  <property name="ivy_repo_url" value="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
  <property name="ivy.artifact.retrieve.pattern" value="${lib}/[artifact]-[revision](-[classifier]).[ext]"/>
  <property name="ivy.jar" location="${ivy}/ivy-${ivy.version}.jar"/>
  <property name="ivysettings.xml" location="${ivy}/ivysettings.xml"/>
  <property name="ivyresolvelog" value="download-only"/>
  <property name="ivyretrievelog" value="quiet"/>
  <loadproperties srcfile="${ivy}/libraries.properties"/>

  <path id="classpath">
    <pathelement location="${build}/classes"/>
    <pathelement location="${build}/test-classes"/>
    <fileset dir="${lib}">
      <include name="*.jar"/>
      <exclude name="**/excluded/"/>
    </fileset>
  </path>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp />
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/classes"/>
    <mkdir dir="${build}/test-classes"/>
  </target>

  <target name="compile" depends="init,ivy-retrieve" description="Compile the source.">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}/classes" debug="on">
      <classpath refid="classpath"/>
    </javac>
    <javac srcdir="${test}" destdir="${build}/test-classes" debug="on">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="dist" depends="compile" description="Generate the distribution jar.">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the grfa.jar file -->
    <jar jarfile="${dist}/lib/grfa.jar" basedir="${build}/classes"/>
  </target>
  
  <target name="test" depends="dist" description="test the distribution">
    <mkdir dir="${test.reports}"/>
    
    <!-- Create classpath -->
    <path id="test.classpath">
      <pathelement location="${build}/classes"/>
      <pathelement location="${build}/test-classes"/>
      <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${dist}">
        <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${conf}"/>
     </path>
  
    <!-- Create the junit test -->
    <junit fork="yes" printsummary="yes"  haltonfailure="yes">
        <formatter type="xml"/>
      <classpath refid="test.classpath"/>
      <batchtest fork="yes" todir="${test.reports}">
        <fileset dir="${test}">
          <include name="**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
    
    <junitreport todir="${test.reports}">
        <fileset dir="${test.reports}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report todir="${test.reports}"/>
    </junitreport>
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
  
  <!-- Check if ant-eclipse.jar exists -->
  <condition property="ant-eclipse.jar.exists">
      <available file="${lib}/ant-eclipse-1.0-jvm1.2.jar"/>
  </condition>

  <!-- Download ivy.jar if it does not exist -->
  <target name="ivy-download" description="To download ivy" unless="offline">
    <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="false"/>
  </target>
	
  <target name="ivy-probe-antlib" >
    <condition property="ivy.found">
      <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
    </condition>
  </target>
	
  <target name="ivy-init-dirs">
    <mkdir dir="${lib}" />
  </target>
	
  <target name="ivy-init-antlib" depends="ivy-download,ivy-init-dirs,ivy-probe-antlib" unless="ivy.found">
    <typedef uri="antlib:org.apache.ivy.ant" onerror="fail"
      loaderRef="ivyLoader">
      <classpath>
        <pathelement location="${ivy.jar}"/>
      </classpath>
    </typedef>
    <fail >
      <condition >
        <not>
          <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
        </not>
      </condition>
      You need Apache Ivy 2.0 or later from http://ant.apache.org/
      It could not be loaded from ${ivy_repo_url}
    </fail>
  </target>
    
  <target name="ivy-init" depends="ivy-init-antlib" >
    <!--Configure Ivy by reading in the settings file
        If anyone has already read in a settings file into this settings ID, it gets priority
    -->
    <ivy:configure settingsid="${ant.project.name}.ivy.settings" file="${ivysettings.xml}" override='false'/>
  </target>
	
  <target name="ivy-resolve" depends="ivy-init">
    <ivy:resolve settingsRef="${ant.project.name}.ivy.settings" transitive="false" 
      log="${ivyresolvelog}"/>
  </target>

  <target name="ivy-retrieve" depends="ivy-resolve"
    description="Retrieve Ivy-managed artifacts">
    <ivy:retrieve settingsRef="${ant.project.name}.ivy.settings"
      pattern="${ivy.artifact.retrieve.pattern}"
        log="${ivyretrievelog}"/>
  </target>

  <!-- Download findbugs.jar if does not exist -->
  <target name="install-findbugs" depends="ivy-init-antlib">
    <ivy:retrieve module="findbugs-ant" organisation="com.google.code.findbugs" revision="${findbugs.version}" pattern="${lib}/findbugs/[artifact].[ext]" sync="true" inline="true" log="download-only" type="jar,report"/>
  </target>
	
  <!-- Setup and use FindBugs -->
  <target name="findbugs" depends="compile, install-findbugs" description="Runs FindBugs over the byte code to check for problems.">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${lib}/findbugs/findbugs-ant.jar" />

    <!-- Set up a path containing the classpath for FindBugs, then convert to a property. -->
    <path id="findbugs.classpath">
      <fileset dir="${lib}/findbugs/">
        <include name="*.jar" />
      </fileset>
    </path>
    <pathconvert property="findbugs.classpath" refid="findbugs.classpath" />

    <!-- Run FindBugs. -->
    <mkdir dir="${findbugs.reports}" />
    <findbugs classpath="${findbugs.classpath}" pluginList="" failOnError="${findbugs.failOnError}" warningsProperty="findbugs.warningsfound" output="xml:withMessages" outputFile="${findbugs.reports}/findbugs.xml">
    	<auxClasspath>
    	  <path refid="classpath" />
    	</auxClasspath>
    	<sourcePath>
        <fileset dir="${src}">
          <include name="**/*.java" />
        </fileset>
      </sourcePath>
      <class location="${build}/classes" />
    </findbugs>
  </target>

  <!-- Download ant-eclipse.jar if does not exist -->
  <target name="ant-eclipse-download" unless="ant-eclipse.jar.exists">
    <get src="http://downloads.sourceforge.net/project/ant-eclipse/ant-eclipse/1.0/ant-eclipse-1.0.bin.tar.bz2"
           dest="${lib}/ant-eclipse-1.0.bin.tar.bz2" usetimestamp="false"/>

    <!-- Untar into lib directory and delete tar file -->
    <untar src="${lib}/ant-eclipse-1.0.bin.tar.bz2"
           dest="." compression="bzip2">
      <patternset>
        <include name="lib/ant-eclipse-1.0-jvm1.2.jar"/>
      </patternset>
    </untar>
    <delete file="${lib}/ant-eclipse-1.0.bin.tar.bz2"/>
  </target>

  <!-- Generate Eclipse project files -->
  <path id="libs">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <target name="eclipse" 
          depends="init,ant-eclipse-download"
          description="Create eclipse project files.">
    <taskdef name="eclipse"
             classname="prantl.ant.eclipse.EclipseTask"
             classpath="${lib}/ant-eclipse-1.0-jvm1.2.jar"/>
    <eclipse updatealways="true">
      <project name="giraffa"/>
      <classpath>
        <source path="${src}" output="build/classes"/>
        <source path="${test}" output="build/test-classes"/>
        <output path="${build}"/>
        <library pathref="libs" exported="false"/>
        <library path="${conf}"/>
      </classpath>
    </eclipse>
  </target>

  <!-- Clean up (remove) Eclipse project files -->
  <target name="clean-eclipse" description="Clean eclipse files">
    <delete file="${lib}/ant-eclipse-1.0-jvm1.2.jar"/>
    <delete file=".classpath"/>
    <delete file=".eclipse"/>
    <delete file=".project"/>
    <delete dir=".settings"/>
  </target>

  <!-- Clean up (remove) Ivy dependency files -->
  <target name="veryclean" description="Clean ivy files" depends="clean">
    <delete file="${ivy.jar}"/>
    <delete dir="${ivy.cache.dir}" />
    <delete dir="${lib}"/>
  </target>

</project>
